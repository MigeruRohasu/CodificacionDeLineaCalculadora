/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import java.awt.Color;
import java.awt.Graphics;
import codificacionfuente.*;

/**
 *
 * @author super
 */
public class Implementacion extends javax.swing.JFrame {

    Sha a = new Sha();
    Huff h = new Huff();
    Aritmetica arit = new Aritmetica();
    AlgebraicaModificada aritm = new AlgebraicaModificada();
    RLE RLE = new RLE();
    RLE_V2 RLEM = new RLE_V2();
    DPCM DPCM = new DPCM();
    int estado = 0;
    int lineaOpcion = 0;
    String tramaBin="";
    /**
     * Creates new form Implementacion
     */
    public Implementacion() {
        initComponents();
        Codificacion.add("Shannon Fano");
        Codificacion.add("Huffman");
        Codificacion.add("Aritmetica");
        Codificacion.add("Algebraica Modificada");
        Codificacion.add("RLE");
        Codificacion.add("RLE Tecnicas");
        Codificacion.add("DPCM");

        Linea.add("Manchester");
        Linea.add("Manchester Diferencial");
        Linea.add("CMI");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        popupMenu1 = new java.awt.PopupMenu();
        popupMenu2 = new java.awt.PopupMenu();
        popupMenu3 = new java.awt.PopupMenu();
        jPanel1 = new javax.swing.JPanel();
        Codificacion = new java.awt.Choice();
        Linea = new java.awt.Choice();
        Iniciar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        codObtenida = new javax.swing.JLabel();
        codHamming = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        popupMenu2.setLabel("popupMenu2");

        popupMenu3.setLabel("popupMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Codificacion, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(Linea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Codificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(Linea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        Iniciar.setText("Inniciar");
        Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        codObtenida.setText("Codificacion Obtenida: ");

        codHamming.setText("Codificacion Hamming:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codObtenida)
                    .addComponent(codHamming))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codObtenida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codHamming)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Iniciar)
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Iniciar)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IniciarActionPerformed

        if (estado == 0) {
            String tramaBin = "";
            String CodificacionChoice = Codificacion.getSelectedItem();
            switch (CodificacionChoice) {
                case "Shannon Fano":
                    a.setVisible(true);
                    a.setLocationRelativeTo(null);
                    break;
                case "Huffman":
                    h.setVisible(true);
                    h.setLocationRelativeTo(null);
                    break;
                case "Aritmetica":
                    arit.setVisible(true);
                    arit.setLocationRelativeTo(null);
                    break;
                case "Algebraica Modificada":
                    aritm.setVisible(true);
                    aritm.setLocationRelativeTo(null);
                    break;
                case "RLE":
                    RLE.setVisible(true);
                    RLE.setLocationRelativeTo(null);
                    break;
                case "RLE Tecnicas":
                    RLEM.setVisible(true);
                    RLEM.setLocationRelativeTo(null);
                    break;
                case "DPCM":
                    DPCM.setVisible(true);
                    DPCM.setLocationRelativeTo(null);
                    break;
            }
            estado = 1;
            Iniciar.setText("Continuar");
        } else if (estado == 1) {
            if(a.getTramaBin()!=""){
                tramaBin=a.getTramaBin();
            }else if(h.getTramaBin()!=""){
                tramaBin=h.getTramaBin();
            }else if(arit.getTramaBin()!=""){
                tramaBin=arit.getTramaBin();
            }else if(aritm.getTramaBin()!=""){
                tramaBin=aritm.getTramaBin();
            }else if(RLE.getTramaBin()!=""){
                tramaBin=RLE.getTramaBin();
            }else if(RLEM.getTramaBin()!=""){
                tramaBin=RLEM.getTramaBin();
            }else if(DPCM.getTramaBin()!=""){
                tramaBin=DPCM.getTramaBin();
            }

            codObtenida.setText("Codificacion Obtenida: "+tramaBin);
            System.out.println("TRAMA BIN" +tramaBin);            
            CodificacionHamming ham=new CodificacionHamming();
            ham.Iniciar(tramaBin);
            tramaBin=ham.getTramaBin();
            codHamming.setText("Codificacion Hamming: "+tramaBin);
            String LineaChoice = Linea.getSelectedItem();
            switch (LineaChoice) {
                case "Manchester":
                    lineaOpcion = 1;
                    break;
                case "Manchester Diferencial":
                    lineaOpcion = 2;
                    break;
                case "CMI":
                    lineaOpcion = 3;
                    break;
            }
        }
    }//GEN-LAST:event_IniciarActionPerformed

    public void paint(Graphics g) {
        super.paint(g);
        int x = 370;
        int y = 200;
        if (lineaOpcion == 0) {
            g.drawString("Esperando Codificacion", x, y);
        } else if (lineaOpcion == 1) {
//Manchester
            g.setColor(Color.RED);
            g.drawLine(x, y, super.getWidth()-30, y);
            
            int xmod=x;
            int ymod=y;
            int estado=0;
            for(int i=0;i<tramaBin.length();i++){
                g.setColor(Color.black);
                if (String.valueOf(tramaBin.charAt(i)).equals("0")) {
                    g.drawLine(xmod, ymod - 20, xmod + 10, ymod - 20);
                    g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                    g.drawLine(xmod + 10, ymod + 20, xmod + 20, ymod + 20);                  
                }
                if (String.valueOf(tramaBin.charAt(i)).equals("1")) {
                    g.drawLine(xmod + 10, ymod - 20, xmod + 20, ymod - 20);
                    g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                    g.drawLine(xmod, ymod + 20, xmod + 10, ymod + 20);                    
                }
                g.setColor(Color.ORANGE);
                g.drawLine(xmod + 20, ymod - 30, xmod + 20, ymod + 30);
                xmod = xmod + 20;
            }
        }else if (lineaOpcion == 2) {
//Manchester Diferencial
            g.setColor(Color.RED);
            g.drawLine(x, y, super.getWidth()-30, y);
            
            int xmod=x;
            int ymod=y;

//0 abajo , 1 arriba
            int estado=1;
            int anterior=0;
            for(int i = 0; i < tramaBin.length(); i++) {
                g.setColor(Color.black);
                if (String.valueOf(tramaBin.charAt(i)).equals("0")) {
                    if (estado == 0) {
                        g.drawLine(xmod, ymod + 20, xmod + 20, ymod + 20);
                        anterior=1;
                        estado=1;
                    }else{
                        g.drawLine(xmod, ymod - 20, xmod + 20, ymod - 20);
                        anterior=0;
                        estado=0;
                    }
                }
                if (String.valueOf(tramaBin.charAt(i)).equals("1")) {
                    if (anterior == 0) {
                        g.drawLine(xmod + 10, ymod - 20, xmod + 20, ymod - 20);
                        g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                        g.drawLine(xmod, ymod + 20, xmod + 10, ymod + 20);                    
                    }else{
                        g.drawLine(xmod, ymod - 20, xmod + 10, ymod - 20);
                        g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                        g.drawLine(xmod + 10, ymod + 20, xmod + 20, ymod + 20); 
                    }
                }
                g.setColor(Color.ORANGE);
                g.drawLine(xmod + 20, ymod - 30, xmod + 20, ymod + 30);
                xmod = xmod + 20;
            }
        }else if (lineaOpcion == 3) {
//CMI
            g.setColor(Color.RED);
            g.drawLine(x, y, super.getWidth()-30, y);
            
            int xmod=x;
            int ymod=y;

//0 abajo , 1 arriba
            int estado=1;
            int anterior=0;
            for(int i = 0; i < tramaBin.length(); i++) {
                g.setColor(Color.black);
                if (String.valueOf(tramaBin.charAt(i)).equals("1")) {
                    if (estado == 0) {
                        g.drawLine(xmod, ymod + 20, xmod + 20, ymod + 20);
                        anterior=1;
                        estado=1;
                    }else{
                        g.drawLine(xmod, ymod - 20, xmod + 20, ymod - 20);
                        anterior=0;
                        estado=0;
                    }
                }
                if (String.valueOf(tramaBin.charAt(i)).equals("0")) {
                    if (anterior == 0) {
                        g.drawLine(xmod + 10, ymod - 20, xmod + 20, ymod - 20);
                        g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                        g.drawLine(xmod, ymod + 20, xmod + 10, ymod + 20);                    
                    }else{
                        g.drawLine(xmod, ymod - 20, xmod + 10, ymod - 20);
                        g.drawLine(xmod + 10, ymod - 20, xmod + 10, ymod + 20);
                        g.drawLine(xmod + 10, ymod + 20, xmod + 20, ymod + 20); 
                    }
                }
                g.setColor(Color.ORANGE);
                g.drawLine(xmod + 20, ymod - 30, xmod + 20, ymod + 30);
                xmod = xmod + 20;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Implementacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Implementacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Implementacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Implementacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Implementacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice Codificacion;
    private javax.swing.JButton Iniciar;
    private java.awt.Choice Linea;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel codHamming;
    private javax.swing.JLabel codObtenida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.PopupMenu popupMenu2;
    private java.awt.PopupMenu popupMenu3;
    // End of variables declaration//GEN-END:variables
}
